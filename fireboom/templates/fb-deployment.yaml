apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "fireboom.fullname" . }}-fb-server
  labels:
    app: fb-server
    version: v1
    app.kubernetes.io/name: {{- include "fireboom.name" . }}
    app.kubernetes.io/version: v1
  annotations:
    servicemesh.kubesphere.io/enabled: 'true'
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app: fb-server
      version: v1
      app.kubernetes.io/name: {{- include "fireboom.name" . }}
      app.kubernetes.io/version: v1
  template:
    metadata:
      # {{- with .Values.podAnnotations }}
      # annotations:
      #   {{- toYaml . | nindent 8 }}
      # {{- end }}
      labels:
        app: fb-server
        version: v1
        app.kubernetes.io/name: {{- include "fireboom.name" . }}
        app.kubernetes.io/version: v1
      annotations:
        sidecar.istio.io/inject: 'true'
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccount: default
      serviceAccountName: default
      restartPolicy: Always
      securityContext: {}
      volumes:
        - name: share-app
          emptyDir: {}
        - name: mount-env
          configMap:
            name: fb-config
            items:
              - key: .env.prod
                path: .env.prod
            defaultMode: 420
        - name: mount-auth-key
          configMap:
            name: fb-config
            items:
              - key: authentication.key
                path: authentication.key
            defaultMode: 420
      initContainers:
        - name: fb-data
          image: "{{ .Values.image.fb-data.repository }}:{{ .Values.image.fb-data.tag | default latest }}"
          resources: {}
          volumeMounts:
            - name: share-app
              mountPath: /app
          imagePullPolicy: Always
        - name: fb-build
          image: 'fireboomapi/fireboom:{{ .Values.fb.tag | default latest }}'
          args:
            - build
          resources: {}
          volumeMounts:
            - name: share-app
              mountPath: /app
            - name: mount-env
              readOnly: true
              mountPath: /app/.env.prod
              subPath: .env.prod
          imagePullPolicy: IfNotPresent
      containers:
        - name: {{- include "fireboom.name" . }}-fb-server
          image: 'fireboomapi/fireboom:{{ .Values.fb.tag | default latest }}'
          imagePullPolicy: {{ .Values.image.fb.pullPolicy | default IfNotPresent }}
          ports:
            - name: http-9123
              containerPort: 9123
              protocol: TCP
            - name: http-9991
              containerPort: 9991
              protocol: TCP
          volumeMounts:
            - name: share-app
              mountPath: /app
            - name: mount-env
              readOnly: true
              mountPath: /app/.env.prod
              subPath: .env.prod
            - name: mount-auth-key
              readOnly: true
              mountPath: /app/authentication.key
              subPath: authentication.key
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          resources: {}
        - name: {{- include "fireboom.name" . }}-fb-hook
          image: "{{ .Values.image.fb-hook.repository }}:{{ .Values.image.fb-hook.tag | default latest }}"
          imagePullPolicy: {{ .Values.image.fb-hook.pullPolicy | default IfNotPresent }}
          ports:
            - name: http-9992
              containerPort: 9992
              protocol: TCP
          volumeMounts:
            - name: share-app
              mountPath: /app
            - name: mount-env
              readOnly: true
              mountPath: /app/.env.prod
              subPath: .env.prod
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          resources: {}